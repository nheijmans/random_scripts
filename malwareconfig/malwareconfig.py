"""
A script to use the API of MalwareConfig (https://malwareconfig.com).
The script can be used as a tool on itself and the class can be imported by
other tools to use.
"""
import argparse
import requests
import os
from pprint import pprint

class MalwareConfig:
    def __init__(self):
        self.values = {'apikey':'0020a316219e895e86dd66a233ec13ec'}

    def test_config(self):
        """ Test the API functionality of MalwareConfig """
        r = requests.post('https://malwareconfig.com/api/test/', data=self.values)
        return r.text

    def view_config(self, hashes):
        """ View the Config of up to 10 file hashes """
        self.values['hashes'] = hashes
        r = requests.post('https://malwareconfig.com/api/file/config/', data=self.values)
        return r.text

    def search_config(self,category,keyword):
        """ Search MalwareConfig for results on the artifacts MD5, SHA256, Domain or IP"""
        self.values['search_word'] = keyword
        r = requests.post('https://malwareconfig.com/api/search/{0}/'.format(category), data=self.values)
        return r.text

    def upload_file(self, file_path):
        """ Upload a file to MalwareConfig """
        files = {'file_submit': open(file_path,'rb')}
        r = requests.post('https://malwareconfig.com/api/upload/', data=self.values, files=files)
        return r.text

if __name__ == '__main__':
    mc          = MalwareConfig()
    parser      = argparse.ArgumentParser(description='MalwareConfig API tool to lookup or submit samples',
                                          version='0.1')
    subparsers  = parser.add_subparsers(help='commands', dest='cmd')
    
    # View command
    view_parser = subparsers.add_parser('view', help='View config of hash(es), comma-seperated')
    view_parser.add_argument('-hash', action='store', help='Hash(es) to view')
    
    # Search command
    search_parser = subparsers.add_parser('search', help='Search for md5,sha256, domain, ip or config')
    search_parser.add_argument('-md5', action='store', help='Search md5 hash')
    search_parser.add_argument('-sha256', action='store', help='Search sha256 hash')
    search_parser.add_argument('-domain', action='store', help='Search domain')
    search_parser.add_argument('-ip', action='store', help='Search ip address')
    
    # Upload command
    upload_parser = subparsers.add_parser('upload', help='Upload a file')
    upload_parser.add_argument('-file', action='store', help='The file path')

    args = parser.parse_args()
    if args.cmd == 'view':
         result = mc.view_config(args.hash)

    elif args.cmd == 'search':
        if args.md5:
            result = mc.search_config('md5',args.md5)
        elif args.sha256:
            result = "Currently not yet working at MalwareConfig"
            #result = mc.search_config('sha256',args.sha256)
        elif args.domain:
            result = mc.search_config('domain',args.domain)
        elif args.ip:
            result = mc.search_config('ip',args.ip)
        else:
            result = {'Not a valid argument.'}

    elif args.cmd == 'upload':
        if os.path.isfile(args.file):
            result = mc.upload_file(args.file)
        else:
            result = {'error':'This is not a file!'}

    pprint(result)
